// Generated by gencpp from file yr_description/FeetPositions.msg
// DO NOT EDIT!


#ifndef YR_DESCRIPTION_MESSAGE_FEETPOSITIONS_H
#define YR_DESCRIPTION_MESSAGE_FEETPOSITIONS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace yr_description
{
template <class ContainerAllocator>
struct FeetPositions_
{
  typedef FeetPositions_<ContainerAllocator> Type;

  FeetPositions_()
    : left_foot()
    , right_foot()  {
    }
  FeetPositions_(const ContainerAllocator& _alloc)
    : left_foot(_alloc)
    , right_foot(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _left_foot_type;
  _left_foot_type left_foot;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _right_foot_type;
  _right_foot_type right_foot;





  typedef boost::shared_ptr< ::yr_description::FeetPositions_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yr_description::FeetPositions_<ContainerAllocator> const> ConstPtr;

}; // struct FeetPositions_

typedef ::yr_description::FeetPositions_<std::allocator<void> > FeetPositions;

typedef boost::shared_ptr< ::yr_description::FeetPositions > FeetPositionsPtr;
typedef boost::shared_ptr< ::yr_description::FeetPositions const> FeetPositionsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yr_description::FeetPositions_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yr_description::FeetPositions_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yr_description::FeetPositions_<ContainerAllocator1> & lhs, const ::yr_description::FeetPositions_<ContainerAllocator2> & rhs)
{
  return lhs.left_foot == rhs.left_foot &&
    lhs.right_foot == rhs.right_foot;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yr_description::FeetPositions_<ContainerAllocator1> & lhs, const ::yr_description::FeetPositions_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yr_description

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::yr_description::FeetPositions_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yr_description::FeetPositions_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yr_description::FeetPositions_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yr_description::FeetPositions_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yr_description::FeetPositions_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yr_description::FeetPositions_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yr_description::FeetPositions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d71882dfd7fa607b1ca2fb34f4c223ba";
  }

  static const char* value(const ::yr_description::FeetPositions_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd71882dfd7fa607bULL;
  static const uint64_t static_value2 = 0x1ca2fb34f4c223baULL;
};

template<class ContainerAllocator>
struct DataType< ::yr_description::FeetPositions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yr_description/FeetPositions";
  }

  static const char* value(const ::yr_description::FeetPositions_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yr_description::FeetPositions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point left_foot\n"
"geometry_msgs/Point right_foot\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::yr_description::FeetPositions_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yr_description::FeetPositions_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_foot);
      stream.next(m.right_foot);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FeetPositions_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yr_description::FeetPositions_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yr_description::FeetPositions_<ContainerAllocator>& v)
  {
    s << indent << "left_foot: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.left_foot);
    s << indent << "right_foot: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.right_foot);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YR_DESCRIPTION_MESSAGE_FEETPOSITIONS_H
