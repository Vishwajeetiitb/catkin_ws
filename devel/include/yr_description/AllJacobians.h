// Generated by gencpp from file yr_description/AllJacobians.msg
// DO NOT EDIT!


#ifndef YR_DESCRIPTION_MESSAGE_ALLJACOBIANS_H
#define YR_DESCRIPTION_MESSAGE_ALLJACOBIANS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <yr_description/JacobianMatrix.h>

namespace yr_description
{
template <class ContainerAllocator>
struct AllJacobians_
{
  typedef AllJacobians_<ContainerAllocator> Type;

  AllJacobians_()
    : jacobians()
    , names()  {
    }
  AllJacobians_(const ContainerAllocator& _alloc)
    : jacobians(_alloc)
    , names(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::yr_description::JacobianMatrix_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::yr_description::JacobianMatrix_<ContainerAllocator> >> _jacobians_type;
  _jacobians_type jacobians;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _names_type;
  _names_type names;





  typedef boost::shared_ptr< ::yr_description::AllJacobians_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yr_description::AllJacobians_<ContainerAllocator> const> ConstPtr;

}; // struct AllJacobians_

typedef ::yr_description::AllJacobians_<std::allocator<void> > AllJacobians;

typedef boost::shared_ptr< ::yr_description::AllJacobians > AllJacobiansPtr;
typedef boost::shared_ptr< ::yr_description::AllJacobians const> AllJacobiansConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yr_description::AllJacobians_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yr_description::AllJacobians_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yr_description::AllJacobians_<ContainerAllocator1> & lhs, const ::yr_description::AllJacobians_<ContainerAllocator2> & rhs)
{
  return lhs.jacobians == rhs.jacobians &&
    lhs.names == rhs.names;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yr_description::AllJacobians_<ContainerAllocator1> & lhs, const ::yr_description::AllJacobians_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yr_description

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::yr_description::AllJacobians_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yr_description::AllJacobians_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yr_description::AllJacobians_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yr_description::AllJacobians_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yr_description::AllJacobians_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yr_description::AllJacobians_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yr_description::AllJacobians_<ContainerAllocator> >
{
  static const char* value()
  {
    return "027902274eec53728e88db4b2e276d6d";
  }

  static const char* value(const ::yr_description::AllJacobians_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x027902274eec5372ULL;
  static const uint64_t static_value2 = 0x8e88db4b2e276d6dULL;
};

template<class ContainerAllocator>
struct DataType< ::yr_description::AllJacobians_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yr_description/AllJacobians";
  }

  static const char* value(const ::yr_description::AllJacobians_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yr_description::AllJacobians_<ContainerAllocator> >
{
  static const char* value()
  {
    return "JacobianMatrix[] jacobians\n"
"string[] names  # Names of the links/end-effectors corresponding to each Jacobian\n"
"\n"
"================================================================================\n"
"MSG: yr_description/JacobianMatrix\n"
"float64[] data  # Flattened matrix data\n"
"uint32 rows     # Number of rows in the matrix\n"
"uint32 columns  # Number of columns in the matrix\n"
;
  }

  static const char* value(const ::yr_description::AllJacobians_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yr_description::AllJacobians_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.jacobians);
      stream.next(m.names);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AllJacobians_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yr_description::AllJacobians_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yr_description::AllJacobians_<ContainerAllocator>& v)
  {
    s << indent << "jacobians[]" << std::endl;
    for (size_t i = 0; i < v.jacobians.size(); ++i)
    {
      s << indent << "  jacobians[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::yr_description::JacobianMatrix_<ContainerAllocator> >::stream(s, indent + "    ", v.jacobians[i]);
    }
    s << indent << "names[]" << std::endl;
    for (size_t i = 0; i < v.names.size(); ++i)
    {
      s << indent << "  names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.names[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // YR_DESCRIPTION_MESSAGE_ALLJACOBIANS_H
